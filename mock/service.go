// Code generated by MockGen. DO NOT EDIT.
// Source: service/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=service/interfaces.go -destination=mock/service.go -package=mockservice
//

// Package mockservice is a generated GoMock package.
package mockservice

import (
	reflect "reflect"

	auth "github.com/alifdwt/haiwangram/domain/requests/auth"
	comment "github.com/alifdwt/haiwangram/domain/requests/comment"
	commentreply "github.com/alifdwt/haiwangram/domain/requests/comment_reply"
	like "github.com/alifdwt/haiwangram/domain/requests/like"
	photo "github.com/alifdwt/haiwangram/domain/requests/photo"
	user "github.com/alifdwt/haiwangram/domain/requests/user"
	responses "github.com/alifdwt/haiwangram/domain/responses"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthService) Login(input *auth.LoginRequest) (*responses.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", input)
	ret0, _ := ret[0].(*responses.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthServiceMockRecorder) Login(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthService)(nil).Login), input)
}

// Register mocks base method.
func (m *MockAuthService) Register(input *auth.RegisterRequest) (*responses.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", input)
	ret0, _ := ret[0].(*responses.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAuthServiceMockRecorder) Register(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthService)(nil).Register), input)
}

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// DeleteUserById mocks base method.
func (m *MockUserService) DeleteUserById(id int) (*responses.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserById", id)
	ret0, _ := ret[0].(*responses.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserById indicates an expected call of DeleteUserById.
func (mr *MockUserServiceMockRecorder) DeleteUserById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserById", reflect.TypeOf((*MockUserService)(nil).DeleteUserById), id)
}

// UpdateUserById mocks base method.
func (m *MockUserService) UpdateUserById(id int, request *user.UpdateUserRequest) (*responses.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserById", id, request)
	ret0, _ := ret[0].(*responses.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserById indicates an expected call of UpdateUserById.
func (mr *MockUserServiceMockRecorder) UpdateUserById(id, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserById", reflect.TypeOf((*MockUserService)(nil).UpdateUserById), id, request)
}

// MockPhotoService is a mock of PhotoService interface.
type MockPhotoService struct {
	ctrl     *gomock.Controller
	recorder *MockPhotoServiceMockRecorder
}

// MockPhotoServiceMockRecorder is the mock recorder for MockPhotoService.
type MockPhotoServiceMockRecorder struct {
	mock *MockPhotoService
}

// NewMockPhotoService creates a new mock instance.
func NewMockPhotoService(ctrl *gomock.Controller) *MockPhotoService {
	mock := &MockPhotoService{ctrl: ctrl}
	mock.recorder = &MockPhotoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPhotoService) EXPECT() *MockPhotoServiceMockRecorder {
	return m.recorder
}

// CreatePhoto mocks base method.
func (m *MockPhotoService) CreatePhoto(userId int, request photo.CreatePhotoRequest) (*responses.PhotoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePhoto", userId, request)
	ret0, _ := ret[0].(*responses.PhotoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePhoto indicates an expected call of CreatePhoto.
func (mr *MockPhotoServiceMockRecorder) CreatePhoto(userId, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePhoto", reflect.TypeOf((*MockPhotoService)(nil).CreatePhoto), userId, request)
}

// DeletePhoto mocks base method.
func (m *MockPhotoService) DeletePhoto(photoId int) (*responses.PhotoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePhoto", photoId)
	ret0, _ := ret[0].(*responses.PhotoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePhoto indicates an expected call of DeletePhoto.
func (mr *MockPhotoServiceMockRecorder) DeletePhoto(photoId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePhoto", reflect.TypeOf((*MockPhotoService)(nil).DeletePhoto), photoId)
}

// GetPhotoAll mocks base method.
func (m *MockPhotoService) GetPhotoAll() (*[]responses.PhotoWithRelationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhotoAll")
	ret0, _ := ret[0].(*[]responses.PhotoWithRelationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhotoAll indicates an expected call of GetPhotoAll.
func (mr *MockPhotoServiceMockRecorder) GetPhotoAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhotoAll", reflect.TypeOf((*MockPhotoService)(nil).GetPhotoAll))
}

// GetPhotoById mocks base method.
func (m *MockPhotoService) GetPhotoById(photoId int) (*responses.PhotoWithRelationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhotoById", photoId)
	ret0, _ := ret[0].(*responses.PhotoWithRelationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhotoById indicates an expected call of GetPhotoById.
func (mr *MockPhotoServiceMockRecorder) GetPhotoById(photoId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhotoById", reflect.TypeOf((*MockPhotoService)(nil).GetPhotoById), photoId)
}

// UpdatePhoto mocks base method.
func (m *MockPhotoService) UpdatePhoto(userId, photoId int, request photo.UpdatePhotoRequest) (*responses.PhotoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePhoto", userId, photoId, request)
	ret0, _ := ret[0].(*responses.PhotoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePhoto indicates an expected call of UpdatePhoto.
func (mr *MockPhotoServiceMockRecorder) UpdatePhoto(userId, photoId, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePhoto", reflect.TypeOf((*MockPhotoService)(nil).UpdatePhoto), userId, photoId, request)
}

// MockCommentService is a mock of CommentService interface.
type MockCommentService struct {
	ctrl     *gomock.Controller
	recorder *MockCommentServiceMockRecorder
}

// MockCommentServiceMockRecorder is the mock recorder for MockCommentService.
type MockCommentServiceMockRecorder struct {
	mock *MockCommentService
}

// NewMockCommentService creates a new mock instance.
func NewMockCommentService(ctrl *gomock.Controller) *MockCommentService {
	mock := &MockCommentService{ctrl: ctrl}
	mock.recorder = &MockCommentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentService) EXPECT() *MockCommentServiceMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockCommentService) CreateComment(userId int, request comment.CreateCommentRequest) (*responses.CommentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", userId, request)
	ret0, _ := ret[0].(*responses.CommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockCommentServiceMockRecorder) CreateComment(userId, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockCommentService)(nil).CreateComment), userId, request)
}

// DeleteComment mocks base method.
func (m *MockCommentService) DeleteComment(commentId int) (*responses.CommentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", commentId)
	ret0, _ := ret[0].(*responses.CommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockCommentServiceMockRecorder) DeleteComment(commentId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockCommentService)(nil).DeleteComment), commentId)
}

// GetCommentAll mocks base method.
func (m *MockCommentService) GetCommentAll() (*[]responses.CommentWithRelationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentAll")
	ret0, _ := ret[0].(*[]responses.CommentWithRelationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentAll indicates an expected call of GetCommentAll.
func (mr *MockCommentServiceMockRecorder) GetCommentAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentAll", reflect.TypeOf((*MockCommentService)(nil).GetCommentAll))
}

// GetCommentById mocks base method.
func (m *MockCommentService) GetCommentById(commentId int) (*responses.CommentWithRelationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentById", commentId)
	ret0, _ := ret[0].(*responses.CommentWithRelationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentById indicates an expected call of GetCommentById.
func (mr *MockCommentServiceMockRecorder) GetCommentById(commentId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentById", reflect.TypeOf((*MockCommentService)(nil).GetCommentById), commentId)
}

// UpdateComment mocks base method.
func (m *MockCommentService) UpdateComment(commentId int, request comment.UpdateCommentRequest) (*responses.CommentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", commentId, request)
	ret0, _ := ret[0].(*responses.CommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockCommentServiceMockRecorder) UpdateComment(commentId, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockCommentService)(nil).UpdateComment), commentId, request)
}

// MockCommentReplyService is a mock of CommentReplyService interface.
type MockCommentReplyService struct {
	ctrl     *gomock.Controller
	recorder *MockCommentReplyServiceMockRecorder
}

// MockCommentReplyServiceMockRecorder is the mock recorder for MockCommentReplyService.
type MockCommentReplyServiceMockRecorder struct {
	mock *MockCommentReplyService
}

// NewMockCommentReplyService creates a new mock instance.
func NewMockCommentReplyService(ctrl *gomock.Controller) *MockCommentReplyService {
	mock := &MockCommentReplyService{ctrl: ctrl}
	mock.recorder = &MockCommentReplyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentReplyService) EXPECT() *MockCommentReplyServiceMockRecorder {
	return m.recorder
}

// CreateCommentReply mocks base method.
func (m *MockCommentReplyService) CreateCommentReply(userId int, request commentreply.CreateCommentReplyRequest) (*responses.CommentReplyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommentReply", userId, request)
	ret0, _ := ret[0].(*responses.CommentReplyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCommentReply indicates an expected call of CreateCommentReply.
func (mr *MockCommentReplyServiceMockRecorder) CreateCommentReply(userId, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommentReply", reflect.TypeOf((*MockCommentReplyService)(nil).CreateCommentReply), userId, request)
}

// DeleteCommentReply mocks base method.
func (m *MockCommentReplyService) DeleteCommentReply(commentReplyId int) (*responses.CommentReplyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommentReply", commentReplyId)
	ret0, _ := ret[0].(*responses.CommentReplyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCommentReply indicates an expected call of DeleteCommentReply.
func (mr *MockCommentReplyServiceMockRecorder) DeleteCommentReply(commentReplyId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommentReply", reflect.TypeOf((*MockCommentReplyService)(nil).DeleteCommentReply), commentReplyId)
}

// GetCommentReplyAll mocks base method.
func (m *MockCommentReplyService) GetCommentReplyAll() (*[]responses.CommentReplyWithRelationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentReplyAll")
	ret0, _ := ret[0].(*[]responses.CommentReplyWithRelationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentReplyAll indicates an expected call of GetCommentReplyAll.
func (mr *MockCommentReplyServiceMockRecorder) GetCommentReplyAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentReplyAll", reflect.TypeOf((*MockCommentReplyService)(nil).GetCommentReplyAll))
}

// GetCommentReplyById mocks base method.
func (m *MockCommentReplyService) GetCommentReplyById(commentReplyId int) (*responses.CommentReplyWithRelationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentReplyById", commentReplyId)
	ret0, _ := ret[0].(*responses.CommentReplyWithRelationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentReplyById indicates an expected call of GetCommentReplyById.
func (mr *MockCommentReplyServiceMockRecorder) GetCommentReplyById(commentReplyId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentReplyById", reflect.TypeOf((*MockCommentReplyService)(nil).GetCommentReplyById), commentReplyId)
}

// UpdateCommentReply mocks base method.
func (m *MockCommentReplyService) UpdateCommentReply(commentReplyId int, request commentreply.UpdateCommentReplyRequest) (*responses.CommentReplyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCommentReply", commentReplyId, request)
	ret0, _ := ret[0].(*responses.CommentReplyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCommentReply indicates an expected call of UpdateCommentReply.
func (mr *MockCommentReplyServiceMockRecorder) UpdateCommentReply(commentReplyId, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCommentReply", reflect.TypeOf((*MockCommentReplyService)(nil).UpdateCommentReply), commentReplyId, request)
}

// MockLikeService is a mock of LikeService interface.
type MockLikeService struct {
	ctrl     *gomock.Controller
	recorder *MockLikeServiceMockRecorder
}

// MockLikeServiceMockRecorder is the mock recorder for MockLikeService.
type MockLikeServiceMockRecorder struct {
	mock *MockLikeService
}

// NewMockLikeService creates a new mock instance.
func NewMockLikeService(ctrl *gomock.Controller) *MockLikeService {
	mock := &MockLikeService{ctrl: ctrl}
	mock.recorder = &MockLikeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLikeService) EXPECT() *MockLikeServiceMockRecorder {
	return m.recorder
}

// CreateLike mocks base method.
func (m *MockLikeService) CreateLike(userId int, request like.CreateLikeRequest) (*responses.LikeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLike", userId, request)
	ret0, _ := ret[0].(*responses.LikeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLike indicates an expected call of CreateLike.
func (mr *MockLikeServiceMockRecorder) CreateLike(userId, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLike", reflect.TypeOf((*MockLikeService)(nil).CreateLike), userId, request)
}

// DeleteLike mocks base method.
func (m *MockLikeService) DeleteLike(likeId int) (*responses.LikeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLike", likeId)
	ret0, _ := ret[0].(*responses.LikeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLike indicates an expected call of DeleteLike.
func (mr *MockLikeServiceMockRecorder) DeleteLike(likeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLike", reflect.TypeOf((*MockLikeService)(nil).DeleteLike), likeId)
}

// GetLikeById mocks base method.
func (m *MockLikeService) GetLikeById(likeId int) (*responses.LikeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikeById", likeId)
	ret0, _ := ret[0].(*responses.LikeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikeById indicates an expected call of GetLikeById.
func (mr *MockLikeServiceMockRecorder) GetLikeById(likeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikeById", reflect.TypeOf((*MockLikeService)(nil).GetLikeById), likeId)
}
