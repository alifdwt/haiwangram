basePath: /api
definitions:
  auth.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  comment.CreateCommentRequest:
    properties:
      message:
        type: string
      photo_id:
        type: integer
    required:
    - message
    - photo_id
    type: object
  comment.UpdateCommentRequest:
    properties:
      message:
        type: string
    required:
    - message
    type: object
  commentreply.CreateCommentReplyRequest:
    properties:
      comment_id:
        type: integer
      message:
        type: string
    required:
    - comment_id
    - message
    type: object
  commentreply.UpdateCommentReplyRequest:
    properties:
      message:
        type: string
    required:
    - message
    type: object
  like.CreateLikeRequest:
    properties:
      photo_id:
        type: integer
    required:
    - photo_id
    type: object
  like.DeleteLikeRequest:
    properties:
      photo_id:
        type: integer
    required:
    - photo_id
    type: object
  responses.CommentReplyResponse:
    properties:
      comment_id:
        type: integer
      id:
        type: integer
      message:
        type: string
      user_id:
        type: integer
    type: object
  responses.CommentReplyWithRelationResponse:
    properties:
      comment:
        $ref: '#/definitions/responses.CommentResponse'
      comment_id:
        type: integer
      id:
        type: integer
      message:
        type: string
      user:
        $ref: '#/definitions/responses.UserResponse'
      user_id:
        type: integer
    type: object
  responses.CommentResponse:
    properties:
      id:
        type: integer
      message:
        type: string
      photo_id:
        type: integer
      user_id:
        type: integer
    type: object
  responses.CommentWithRelationResponse:
    properties:
      id:
        type: integer
      message:
        type: string
      photo:
        $ref: '#/definitions/responses.PhotoResponse'
      photo_id:
        type: integer
      replies:
        items:
          $ref: '#/definitions/responses.CommentReplyResponse'
        type: array
      user:
        $ref: '#/definitions/responses.UserResponse'
      user_id:
        type: integer
    type: object
  responses.ErrorMessage:
    properties:
      message:
        description: StatusCode int    `json:"statusCode"`
        type: string
    type: object
  responses.LikeResponse:
    properties:
      id:
        type: integer
      photo_id:
        type: integer
      user_id:
        type: integer
    type: object
  responses.PhotoResponse:
    properties:
      caption:
        type: string
      created_at:
        type: string
      id:
        type: integer
      photo_url:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  responses.PhotoWithRelationResponse:
    properties:
      caption:
        type: string
      comments:
        items:
          $ref: '#/definitions/responses.CommentResponse'
        type: array
      created_at:
        type: string
      id:
        type: integer
      likes:
        items:
          $ref: '#/definitions/responses.LikeResponse'
        type: array
      photo_url:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/responses.UserResponse'
      user_id:
        type: integer
    type: object
  responses.Token:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFwdXRyYWRld2FudGFyYUBnbWFpbC5jb20iLCJ1c2VybmFtZSI6ImFsaWZkd3QiLCJhZ2UiOjI0LCJpc3MiOiIxNzEwODY5NTgzIiwic3ViIjoiMiIsImV4cCI6MTcxMDg3MTM4MywiaWF0IjoxNzEwODY5NTgzLCJqdGkiOiI3OTQzZDc0Ny04Mzk1LTRlMzktYmZmYS1iM2RiODM0ZGZjNmEifQ.Ngh-kJiAh3_nEmaWP5emX2iZSTF-4IAykH6VC9szyxY
        type: string
    type: object
  responses.UserResponse:
    properties:
      birth_date:
        type: string
      description:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: integer
      profile_image_url:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: aputradewantara@gmail.com
    name: Alif Dewantara
    url: http://github.com/alifdwt
  description: This is HaiwanGram API documentation.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: HaiwanGram API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login a user
      parameters:
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Token'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      summary: Login to the HaiwanGram
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - multipart/form-data
      description: Register a new user
      parameters:
      - description: Email
        in: formData
        name: email
        required: true
        type: string
      - description: Username
        in: formData
        name: username
        required: true
        type: string
      - description: Full Name
        in: formData
        name: full_name
        required: true
        type: string
      - description: Birth Date (YYYY-MM-DD)
        in: formData
        name: birth_date
        required: true
        type: string
      - description: Profile Image
        in: formData
        name: profile_image
        required: true
        type: file
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      - description: Description
        in: formData
        name: description
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      summary: Register to the HaiwanGram
      tags:
      - auth
  /comment-replies:
    get:
      consumes:
      - application/json
      description: Get all comment reply from the application
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.CommentReplyWithRelationResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      summary: Get all comment reply
      tags:
      - comment reply
    post:
      consumes:
      - application/json
      description: Create comment reply
      parameters:
      - description: comment reply data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/commentreply.CreateCommentReplyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.CommentReplyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      security:
      - BearerAuth: []
      summary: Create comment reply
      tags:
      - comment reply
  /comment-replies/{commentReplyId}:
    delete:
      consumes:
      - application/json
      description: Delete comment reply
      parameters:
      - description: Comment Reply ID
        in: path
        name: commentReplyId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CommentReplyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      security:
      - BearerAuth: []
      summary: Delete comment reply
      tags:
      - comment reply
    get:
      consumes:
      - application/json
      description: Get comment reply by id
      parameters:
      - description: Comment Reply ID
        in: path
        name: commentReplyId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CommentReplyWithRelationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      summary: Get comment reply by id
      tags:
      - comment reply
    put:
      consumes:
      - application/json
      description: Update comment reply
      parameters:
      - description: Comment Reply ID
        in: path
        name: commentReplyId
        required: true
        type: integer
      - description: comment reply data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/commentreply.UpdateCommentReplyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CommentReplyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      security:
      - BearerAuth: []
      summary: Update comment reply
      tags:
      - comment reply
  /comments:
    get:
      consumes:
      - application/json
      description: Get all comments from the application
      parameters:
      - description: Photo ID
        in: query
        name: photoId
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.CommentWithRelationResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      summary: Get all comments
      tags:
      - comments
    post:
      consumes:
      - application/json
      description: Create comment
      parameters:
      - description: comment data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/comment.CreateCommentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.CommentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      security:
      - BearerAuth: []
      summary: Create comment
      tags:
      - comments
  /comments/{commentId}:
    delete:
      consumes:
      - application/json
      description: Delete comment by id
      parameters:
      - description: Comment ID
        in: path
        name: commentId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CommentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      security:
      - BearerAuth: []
      summary: Delete comment
      tags:
      - comments
    get:
      consumes:
      - application/json
      description: Get comment by id
      parameters:
      - description: Comment ID
        in: path
        name: commentId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CommentWithRelationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      summary: Get comment by id
      tags:
      - comments
    put:
      consumes:
      - application/json
      description: Update comment by id
      parameters:
      - description: Comment ID
        in: path
        name: commentId
        required: true
        type: integer
      - description: comment data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/comment.UpdateCommentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CommentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      security:
      - BearerAuth: []
      summary: Update comment
      tags:
      - comments
  /likes:
    delete:
      consumes:
      - application/json
      description: Delete like
      parameters:
      - description: like data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/like.DeleteLikeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.LikeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      security:
      - BearerAuth: []
      summary: Delete like
      tags:
      - likes
    post:
      consumes:
      - application/json
      description: Create like
      parameters:
      - description: like data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/like.CreateLikeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.LikeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      security:
      - BearerAuth: []
      summary: Create like
      tags:
      - likes
  /photos:
    get:
      consumes:
      - application/json
      description: Get all photos from the application
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: User ID
        in: query
        name: userId
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.PhotoWithRelationResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      summary: Get all photos
      tags:
      - photos
    post:
      consumes:
      - multipart/form-data
      description: Create photo
      parameters:
      - description: Title
        in: formData
        name: title
        required: true
        type: string
      - description: Caption
        in: formData
        name: caption
        required: true
        type: string
      - description: Image
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.PhotoResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      security:
      - BearerAuth: []
      summary: Create photo
      tags:
      - photos
  /photos/{photoId}:
    delete:
      consumes:
      - application/json
      description: Delete photo
      parameters:
      - description: Photo ID
        in: path
        name: photoId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.PhotoResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      security:
      - BearerAuth: []
      summary: Delete photo
      tags:
      - photos
    get:
      consumes:
      - application/json
      description: Get photo by id
      parameters:
      - description: Photo ID
        in: path
        name: photoId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.PhotoWithRelationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      summary: Get photo by id
      tags:
      - photos
    put:
      consumes:
      - multipart/form-data
      description: Update photo
      parameters:
      - description: Photo ID
        in: path
        name: photoId
        required: true
        type: integer
      - description: Title
        in: formData
        name: title
        required: true
        type: string
      - description: Caption
        in: formData
        name: caption
        required: true
        type: string
      - description: Image
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.PhotoResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      security:
      - BearerAuth: []
      summary: Update photo
      tags:
      - photos
  /users:
    delete:
      consumes:
      - application/json
      description: Delete user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get logged in user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      security:
      - BearerAuth: []
      summary: Get logged in user
      tags:
      - users
  /users/{username}:
    get:
      consumes:
      - application/json
      description: Get user by username
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      summary: Get user by username
      tags:
      - users
  /users/random/{count}:
    get:
      consumes:
      - application/json
      description: Get random user
      parameters:
      - description: Count
        in: path
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.UserResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      summary: Get random user
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
